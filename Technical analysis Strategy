import pandas as pd
import time
import datetime
from kiteconnect import KiteConnect
from modules import auth
from modules import historical_data
from utils import PositionSizing as ps
from utils import Move as mv
watchlist = ['SILVER']
import time
from PythonImportantApis import  csvManipulation as CM

# Initialization of values
totalFund = 100000
traded_count = 0
entry_price = 0
exit_price = 0
trade_target = 0
trade_sl = 0
traded = False
trade_long = False
trade_short = False
trade_qty = 1
trade_pnlBooked = False
trade_exit_time = None
trade_entry_time = None
trade_slhit = False
pnl = 0
total_pnl = 0

"""
1. Login to kite
"""
userdata = auth.get_userdata()
kite = KiteConnect(api_key=userdata['api_key'])
kite.set_access_token(userdata['access_token'])

print("*** UserData Loaded **** : ", datetime.datetime.now())
startdate = datetime.datetime(2020, 3, 15)
enddate = datetime.datetime(2020, 4, 15)
interval = "10minute"

read_stock = kite.historical_data(watchlist[0], startdate, enddate, interval)  # Provide the path of file
high = 0
low = 11110000
trade_open_high = 0
trade_open_low = 0
percentageMove = 0
pnl_Save = {
            'name':'SILVER','entry_price': 0,'exit_price': 0,'entry_time':0,'exit_time':0,'pnl':0,'range':0,
            'Cummulative_Profit':0,'percentageReturn':0
}
pnlProfits = []
# Iterating the values of stock
def get_time(input_string):
    dt_object = datetime.strptime(input_string, "%Y-%m-%d %H:%M:%S%z")
    time_component = dt_object.time()
    return (time_component)

for index,row in read_stock.iterrows():

    if get_time(row['timestamp']) == "09:15":
        high = 0
        low = 11110000
        trade_open_high = 0
        trade_open_low = 11100000
        entry_price = 0
        exit_price = 0
        trade_target = 0
        trade_sl = 0
        traded = False
        trade_long = False
        trade_short = False
        trade_qty = 1
        trade_pnlBooked = False
        trade_exit_time = None
        trade_entry_time = None
        trade_slhit = False
        pnl = 0

    if get_time(row['timestamp']) >= "09:15" and get_time(row['timestamp']) <= "10:15":
        # Saving the high and low within the 1 hour to calculate the range
        if trade_open_high < row['high']:
            trade_open_high = row['high']
        if trade_open_low > row['low']:
            trade_open_low = row['low']

    if get_time(row['timestamp']) >= "09:30" and get_time(row['timestamp']) <= "15:15":

        if traded is True and trade_pnlBooked is False:  # We have entered the market

            if get_time(row['timestamp']) is not "15:15":  # current time is not 3 pm 15 minutes
                if trade_long is True:

                    if row['close'] >= trade_target:   # Target reached
                        trade_exit_time = get_time(row['timestamp'])
                        exit_price = row['close']
                        pnl = (exit_price - entry_price) * trade_qty
                        trade_pnlBooked = True
                        total_pnl = total_pnl + pnl
                        pnl_Save['entry_price'] = entry_price
                        pnl_Save['exit_price'] = exit_price
                        pnl_Save['pnl'] = pnl
                        pnl_Save['entry_time'] = trade_entry_time
                        pnl_Save['exit_time'] = trade_exit_time
                        pnl_Save['range'] = range
                        pnl_Save['Cummulative_Profit'] = total_pnl
                        if trade_long is True :
                            pnl_Save['percentageReturn'] = (( exit_price - entry_price ) / entry_price )*100
                        else :
                            pnl_Save['percentageReturn'] = ((entry_price - exit_price) / entry_price) * 100
                        pnlProfits.append(pnl_Save)
                        pnl_Save = {
            'name':'SILVER','entry_price': 0,'entry_time':0,'exit_price': 0,'exit_time':0,'pnl':0,'range':0,
            'Cummulative_Profit':0,'percentageReturn':0
}
                        # for key in pnl_Save:
                        #     CM.append_items('TCS.csv', pnl_Save, keyValue=key)
                        # print('pnl is-->', pnl)
                        print('Total pnl is-->', total_pnl)

                    if row['close'] < trade_sl:        # Stop loss hit
                        trade_exit_time = get_time(row['timestamp'])
                        exit_price = row['close']
                        pnl = (exit_price - entry_price) * trade_qty
                        trade_pnlBooked = True
                        total_pnl = total_pnl + pnl
                        pnl_Save['entry_price'] = entry_price
                        pnl_Save['exit_price'] = exit_price
                        pnl_Save['pnl'] = pnl
                        pnl_Save['entry_time'] = trade_entry_time
                        pnl_Save['exit_time'] = trade_exit_time
                        pnl_Save['range'] = range
                        pnl_Save['Cummulative_Profit'] = total_pnl
                        if trade_long is True:
                            pnl_Save['percentageReturn'] = ((exit_price - entry_price) / entry_price) * 100
                        else:
                            pnl_Save['percentageReturn'] = ((entry_price - exit_price) / entry_price) * 100

                        # print('pnl is-->', pnl)
                        pnlProfits.append(pnl_Save)
                        pnl_Save = {
            'name':'SILVER','entry_price': 0,'entry_time':0,'exit_price': 0,'exit_time':0,'pnl':0,'range':0,
            'Cummulative_Profit':0,'percentageReturn':0
}
                        # for key in pnl_Save:
                        #     CM.append_items('TCS.csv', pnl_Save, keyValue=key)
                        print('Total pnl is-->', total_pnl)

                if trade_short is True:

                    if row['close'] <= trade_target:     # Target reached
                        trade_exit_time = get_time(row['timestamp'])
                        exit_price = row['close']
                        pnl = (entry_price - exit_price) * trade_qty
                        trade_pnlBooked = True
                        total_pnl = total_pnl + pnl
                        pnl_Save['name'] = 'TCS'
                        pnl_Save['entry_price'] = entry_price
                        pnl_Save['exit_price'] = exit_price
                        pnl_Save['pnl'] = pnl
                        pnl_Save['entry_time'] = trade_entry_time
                        pnl_Save['exit_time'] = trade_exit_time
                        pnl_Save['range'] = range
                        pnl_Save['Cummulative_Profit'] = total_pnl
                        if trade_long is True:
                            pnl_Save['percentageReturn'] = ((exit_price - entry_price) / entry_price) * 100
                        else:
                            pnl_Save['percentageReturn'] = ((entry_price - exit_price) / entry_price) * 100

                        pnlProfits.append(pnl_Save)
                        pnl_Save = {
            'name':'SILVER','entry_price': 0,'entry_time':0,'exit_price': 0,'exit_time':0,'pnl':0,'range':0,
            'Cummulative_Profit':0,'percentageReturn':0
}
                        # for key in pnl_Save:
                        #     CM.append_items('TCS.csv', pnl_Save, keyValue=key)
                        # print('pnl is-->', pnl)
                        print('Total pnl is-->', total_pnl)

                    if row['close'] > trade_sl:
                        trade_exit_time = get_time(row['timestamp'])
                        exit_price = row['close']
                        pnl = (entry_price - exit_price) * trade_qty
                        trade_pnlBooked = True
                        total_pnl = total_pnl + pnl
                        pnl_Save['name'] = 'TCS'
                        pnl_Save['entry_price'] = entry_price
                        pnl_Save['exit_price'] = exit_price
                        pnl_Save['pnl'] = pnl
                        pnl_Save['entry_time'] = trade_entry_time
                        pnl_Save['exit_time'] = trade_exit_time
                        pnl_Save['range'] = range
                        pnl_Save['Cummulative_Profit'] = total_pnl
                        if trade_long is True:
                            pnl_Save['percentageReturn'] = ((exit_price - entry_price) / entry_price) * 100
                        else:
                            pnl_Save['percentageReturn'] = ((entry_price - exit_price) / entry_price) * 100

                        pnlProfits.append(pnl_Save)
                        pnl_Save = {
            'name':'SILVER','entry_price': 0,'entry_time':0,'exit_price': 0,'exit_time':0,'pnl':0,'range':0,
            'Cummulative_Profit':0,'percentageReturn':0
}
                        # for key in pnl_Save:
                        #     CM.append_items('TCS.csv', pnl_Save, keyValue=key)
                        # print('pnl is-->', pnl)
                        print('Total pnl is-->', total_pnl)

            if get_time(row['timestamp']) is "15:15":
                print('Exit while market close')
                trade_exit_time = get_time(row['timestamp'])
                exit_price = row['close']
                trade_pnlBooked = True
                if trade_long is True:
                    pnl = (exit_price - entry_price) * trade_qty
                    total_pnl = total_pnl + pnl
                    pnl_Save['name'] = 'TCS'
                    pnl_Save['entry_price'] = entry_price
                    pnl_Save['exit_price'] = exit_price
                    pnl_Save['pnl'] = pnl
                    pnl_Save['entry_time'] = trade_entry_time
                    pnl_Save['exit_time'] = trade_exit_time
                    pnl_Save['range'] = range
                    pnl_Save['Cummulative_Profit'] = total_pnl
                    pnlProfits.append(pnl_Save)
                    pnl_Save = {
                        'name': 'SILVER', 'entry_price': 0, 'exit_price': 0, 'exit_time': 0, 'pnl': 0, 'range': 0,
                        'entry_time': 0,
                        'Cummulative_Profit': 0, 'percentageReturn': 0
                    }
                    # for key in pnl_Save:
                    #    CM.append_items('TCS.csv', pnl_Save, keyValue=key)
                    # print('Total pnl is-->', total_pnl)

                if trade_short is True:
                    pnl = (entry_price - exit_price) * trade_qty
                    total_pnl = total_pnl + pnl
                    pnl_Save['name'] = 'SILVER'
                    pnl_Save['entry_price'] = entry_price
                    pnl_Save['exit_price'] = exit_price
                    pnl_Save['pnl'] = pnl
                    pnl_Save['entry_time'] = trade_entry_time
                    pnl_Save['exit_time'] = trade_exit_time
                    pnl_Save['range'] = range
                    pnl_Save['Cummulative_Profit'] = total_pnl
                    pnlProfits.append(pnl_Save)
                    pnl_Save = {
                        'name': 'NSE:INFY', 'entry_price': 0, 'exit_price': 0, 'pnl': 0, 'range': 0, 'entry_time': 0,
                        'Cummulative_Profit': 0,
                    }
                    # for key in pnl_Save:
                    #     CM.append_items('TCS.csv', pnl_Save, keyValue=key)
                    print('Total pnl is-->', total_pnl)

        if traded is False:   # We havent entered the market
            if row['close'] >= trade_open_high:  # Breakout occured upward
                trade_long = True
                traded = True

                entry_price = trade_open_high + 1
                trade_qty = ps.total_quantity(250000, int(trade_open_high - trade_open_low), row['close'], 1)
                traded_count = traded_count + 1
                range = int(trade_open_high - trade_open_low)
                trade_entry_time = get_time(row['timestamp'])
                trade_target = trade_open_high + int(trade_open_high/100)
                trade_sl = trade_open_high - int(row['close'] / 500)

            elif row['close'] < trade_open_low:  # Breakout occured downward
                trade_short = True
                traded = True
                entry_price = trade_open_low - 1
                range = int(trade_open_high - trade_open_low)
                trade_qty = ps.total_quantity(250000, int(trade_open_high - trade_open_low), row['close'], 1)
                traded_count = traded_count + 1
                trade_entry_time =get_time(row['timestamp'])
                trade_target = trade_open_low - int(trade_open_high/100)
                trade_sl = trade_open_low + int(row['close'] / 500)

    if get_time(row['timestamp']) >= "09:15" and get_time(row['timestamp']) <= "15:25":
        if high < row['high']:
            high = row['high']
        if low > row['low']:
            low = row['low']

newData = pd.DataFrame(pnlProfits)
newData.to_csv('SILVER.csv')
print('Total Number of Trades',traded_count)
